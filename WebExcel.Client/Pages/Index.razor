@page "/"
@inject HttpClient Http
@inject HttpClient HttpClient
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using WebExcel.Shared
@using System.Text;
@using System.Text.Json;

<PageTitle>WebExcel</PageTitle>

<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="check-circle-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
    </symbol>
    <symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z" />
    </symbol>
    <symbol id="exclamation-triangle-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
    </symbol>
</svg>


@if (isLoading)
{
    <label for="filePicker">
        <button type="button" class="main-button btn btn-primary btn-lg" disabled>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Loading...
        </button>
    </label>
}
else
{
    <label for="filePicker">
        <button type="button" class="main-button btn btn-primary btn-lg">
            Select a file
        </button>
    </label>
}

<InputFile id="filePicker" style="display: none;" class="form-control" OnChange="@LoadFiles" />


@if (error == true)
{
    <div class="alert alert-warning alert-dismissible fade show align-items-center" role="alert">
        <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill" /></svg>
        <div style="display: inline">
            @message
        </div>
        <button @onclick="ResetError" type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
else if (error == false)
{
    <div class="alert alert-success d-flex align-items-center alert-dismissible fade show" role="alert">
        <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill" /></svg>
        <div style="display: inline">
            @message
        </div>
        <button @onclick="ResetError" type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}



@if (uploadResult != null)
{
    if (uploadResult.Uploaded && uploadResult.Data != null)
    {
        <div class="table-container">
            <table id="datatable" class="align-middle table table-hover table-bordered">
                <thead class="align-middle">
                    <tr>
                        @foreach (var property in uploadResult.Data[0])
                        {
                            <th>@property.Key</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var record in uploadResult.Data)
                    {
                        <tr>
                            @foreach (var property in record)
                            {
                                @if (@property.Value == null || @property.Value == "" || @property.Value == "BROKEN DATA")
                                {
                                    <td class="table-warning">@property.Value</td>
                                }
                                else
                                {
                                    <td>@property.Value</td>
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {
    private long maxFileSize = 1024 * 1000;
    private bool isLoading = false;
    private const string SERVER_URL = "https://localhost:7273/api/filesave";

    private UploadResult? uploadResult;
    private bool? error;

    private String message = "Initial state";

    public void ResetError()
    {
        error = null;
    }

    async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var file = e.GetMultipleFiles(1)[0];
        if (Path.GetExtension(file.Name) != ".xlsx")
        {
            error = true;
            message = String.Format("Допустимы только Microsoft Excel файлы, но Вы предоставили '{0}'",
            file.Name);
            isLoading = false;
            return;
        }

        try
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

            fileContent.Headers.ContentType = new MediaTypeHeaderValue("multipart/form-data");

            content.Add(fileContent, "\"file\"", file.Name);
            using var result_api = await Http.PostAsync(SERVER_URL, content);
            uploadResult = await result_api.Content.ReadFromJsonAsync<UploadResult>();

            if (uploadResult?.ErrorCode != null)
            {
                error = true;
                switch (uploadResult.ErrorCode)
                {
                    case 1:
                        {
                            message = String.Format("Файл '{0}' пуст",
                                uploadResult?.FileName ?? "UNKNOWN_NAME");
                            break;
                        }
                    case 2:
                        {
                            message = String.Format("Размер файла '{0}' больше допустимого порога '{1}'",
                                uploadResult?.FileName ?? "UNKNOWN_NAME",
                                maxFileSize);
                            break;
                        }
                    case 3:
                        {
                            message = String.Format("Произошла ошибка записи файла '{0}' на сервер",
                                uploadResult?.FileName ?? "UNKNOWN_NAME");
                            break;
                        }
                    case 4:
                        {
                            message = "Произошло что-то странное. Технические трудности преследуются лучшими следователями";
                            break;
                        }
                    case 5:
                        {
                            message = String.Format("Файл '{0}' имеет ошибки содержания, поэтому его невозможно корректно обработать",
                                uploadResult?.FileName ?? "UNKNOWN_NAME");
                            break;
                        }
                    default:
                        {
                            message = "Произошло что-то уж очень странное. Технические трудности преследуются лучшими следователями";
                            break;   
                        }
                }
            }
            else
            {
                message = String.Format("＼(≧▽≦)／ Файл '{0}' успешно сохраненн под именем '{1}'",
                        uploadResult?.FileName ?? "UNKNOWN_NAME",
                        uploadResult?.StoredFileName ?? "UNKNOWN_TRUSTED_NAME");

                error = false;
            }
            
            isLoading = false;
        }
        catch (Exception ex)
        {
            error = true;
            isLoading = false;
            message = String.Format("Серверу не нравится Ваш файл (╥﹏╥). <br \\> Ошибка: {0}", ex.Message);
        }
    }
}