@page "/"
@inject HttpClient Http
@inject HttpClient HttpClient
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging

<PageTitle>Main</PageTitle>

<button class="btn btn-primary" @onclick="StartProcess">Click me, bro</button>
<InputFile OnChange="@LoadFiles" single />
<p>
    <label>
        Max file size:
        <input type="number" @bind="maxFileSize" />
    </label>
</p>

<p>@message</p>

@if (recieved_dict != null)
{
    <table class="table">
        <thead>
            <tr>
                @* foreach(var person in people)
            {
            Console.WriteLine($"key: {person.Key}  value: {person.Value}");
            }*@

                @foreach (var header_item in recieved_dict)
                {
                    <th>@header_item.Key</th>
                }
                @*<th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>*@
            </tr>
        </thead>
        <tbody>
            @*@code {
        @foreach (var header_item in recieved_dict)
        }*@

            @foreach (var header_item in recieved_dict)
            {
                @*<tr>
        <td>@forecast.Date.ToShortDateString()</td>
        <td>@forecast.TemperatureC</td>
        <td>@forecast.TemperatureF</td>
        <td>@forecast.Summary</td>
        </tr>
        <th>@header_item.Key</th>*@
            }

            @*@foreach (var forecast in forecasts)
        {
        <tr>
        <td>@forecast.Date.ToShortDateString()</td>
        <td>@forecast.TemperatureC</td>
        <td>@forecast.TemperatureF</td>
        <td>@forecast.Summary</td>
        </tr>
        }*@
        </tbody>
    </table>
    <br />
    <br />
    <br />
}

@if (loadedFiles != null)
{
    @foreach (var file in loadedFiles)
    {
        <p>@file.Name</p>
    }
}



@code {
    private long maxFileSize = 1024 * 15;
    private bool isLoading;

    private String message = "Initial state";
    private const String SERVER_URL = "https://localhost:7273/test";

    public Dictionary<string, List<string>>? recieved_dict;


    private List<IBrowserFile> loadedFiles = new();

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();
        var file = e.GetMultipleFiles(1)[0];
        var upload = false;
        try
        {
            var fileContent = new StreamContent(file.OpenReadStream());
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);
            upload = true;

            //await using FileStream fs = new(path, FileMode.Create);
            //await browserFile.OpenReadStream().CopyToAsync(fs);
        }
        catch (Exception ex)
        {
            //Logger.LogError("File: {Filename} Error: {Error}",
            //    file.Name, ex.Message);
            message = ex.Message;
        }

        if (upload)
        {
            using var file_response = await HttpClient.PostAsJsonAsync("https://localhost:7273/upload", content);
            String answer = await file_response.Content.ReadAsStringAsync();
            message = answer;
        }
    }

    async Task StartProcess()
    {
        var postBody = new { Title = "Blazor POST Request Example" };
        try
        {
            //using var response = await HttpClient.PostAsJsonAsync("https://reqres.in/api/articles", postBody);
            using var my_response = await HttpClient.PostAsJsonAsync("https://localhost:7273/test", postBody);
            recieved_dict = await my_response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
            //message = await my_response.Content.ReadAsStringAsync();

            //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        }
        catch (Exception ex)
        {
            message = ex.ToString();
        }

    }
}